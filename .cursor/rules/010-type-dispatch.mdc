---
description: Type dispatch and discriminated unions - the core of SDA branching
globs: ["**/*.py"]
alwaysApply: true
---

# Type Dispatch and Discriminated Unions

## ðŸš¨ ABSOLUTE LAW
**ALL BRANCHING LOGIC MUST USE DISCRIMINATED UNIONS.**
No if. No match. No isinstance. DISCRIMINATED UNIONS.

## Core Dispatch Patterns

### 1. StrEnum with Behavioral Methods
- **REQUIRED**: All StrEnum MUST have methods that dispatch behavior
- **REQUIRED**: Use dictionary dispatch pattern, not conditionals
- **REQUIRED**: State machines encoded in enum methods

### 2. Pydantic Discriminated Unions
```python
# MANDATORY: Use this exact syntax for discriminated unions
Notification = Annotated[
    Union[EmailNotification, SmsNotification],
    Field(discriminator="type")
]
```
- **REQUIRED**: Each variant MUST have `type: Literal["variant_name"]`
- **REQUIRED**: Union MUST use `Field(discriminator="type")`
- **BANNED**: Manual type checking - let polymorphism handle dispatch

### 3. Result Types Instead of Exceptions
- **REQUIRED**: Use StrEnum for all result types
- **REQUIRED**: Result types MUST have methods that know their behavior
- **BANNED**: try/except for control flow

### 4. State-Based Type Dispatch
- **REQUIRED**: State transitions encoded in enum methods
- **REQUIRED**: Use dictionary dispatch for state machines
- **BANNED**: Conditional logic for state handling

## Replacing Common Patterns

### Boolean Flags â†’ Two-State Enum
- **BANNED**: `if is_active:` conditionals
- **REQUIRED**: Create StrEnum with behavior methods

### Optional Fields â†’ Explicit States  
- **BANNED**: `if user.subscription:` checks
- **REQUIRED**: Use discriminated unions with explicit state types

### Type Checking â†’ Type Dispatch
- **BANNED**: `isinstance()` checks
- **REQUIRED**: Let objects handle themselves via polymorphism

## Rules for Type Dispatch

1. **Every branch point needs a type** - No raw conditionals
2. **Types carry behavior** - Methods on enums and models
3. **Dispatch tables over conditionals** - Dictionary dispatch pattern
4. **Fail fast at construction** - Invalid states unrepresentable
5. **State machines in enums** - Transitions as enum methods
6. **Polymorphism over conditionals** - Let objects handle themselves

## The Golden Rule
**If you're writing `if`, stop and create a type instead.**