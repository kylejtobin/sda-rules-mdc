---
description: SDA transformation patterns and examples
globs:
alwaysApply: false
---

# SDA Reference Patterns

## Conditional → Type Dispatch
```python
# ❌ Before: Procedural conditional chains
violation_processor = get_violation_processor(violation_type)

# ✅ After: Type dispatch with enum behavior
class ViolationType(StrEnum):
    isinstance_violations = "isinstance_violations"
    hasattr_violations = "hasattr_violations"

    def create_finding(self, node: CodeNode) -> Finding:
        # Enum knows how to create its own findings
        return Finding(type=self, node=node)
```

## Runtime Checking → Discriminated Unions
```python
# ❌ Before: Runtime type checking with procedural logic
order_processor = get_order_processor(order.status)

# ✅ After: Discriminated union with type dispatch
class OrderStatus(StrEnum):
    PAID = "paid"
    DRAFT = "draft"
    
    def process(self, order: "Order") -> ProcessResult:
        # Type-safe dispatch without generics
        return {
            OrderStatus.PAID: order.ship,
            OrderStatus.DRAFT: order.reject_shipping
        }[self](order)
```

## Primitive → Value Object
```python
# ❌ Before: Primitive obsession
file_path: str = "src/models.py"
# Conditional logic with primitives

# ✅ After: Value object with domain intelligence
class FilePath(BaseModel):
    path: str

    @computed_field
    @property
    def file_type(self) -> FileType:
        # Push string operations to type system
        return FileType.from_path(self.path)

    @computed_field
    @property
    def module_name(self) -> ModuleName:
        # Domain intelligence in value objects
        return ModuleName.from_path(self.path)
```

## State → Discriminated Union Pattern
```python
# ❌ Before: Procedural state logic
state_processor = get_state_processor(current_state)

# ✅ After: Discriminated union state dispatch
class ProcessingState(StrEnum):
    ACTIVE = "active"
    INACTIVE = "inactive"
    
    def get_result(self, value: ProcessValue, default: ProcessValue) -> ProcessValue:
        # Pure type dispatch without lambdas
        return {
            ProcessingState.ACTIVE: value,
            ProcessingState.INACTIVE: default
        }[self]
```
