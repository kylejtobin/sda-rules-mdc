---
description: SDA violations to avoid - TOXIC patterns that poison codebases
globs: ["**/*.py"]
alwaysApply: true
---

# üö® TOXIC ANTI-PATTERNS - ARCHITECTURAL POISON üö®

These patterns are **INTELLECTUAL BANKRUPTCY**. They represent the **FAILURE TO MODEL DOMAINS** and the **ABDICATION OF MATHEMATICAL THINKING**.

## üíÄ RUNTIME TYPE CHECKING - THE COWARD'S DISPATCH

**isinstance() / hasattr() / getattr() / type()** - These are the tools of those who **REFUSE TO THINK AT COMPILE TIME**. Every runtime type check is an **ADMISSION OF DESIGN FAILURE**.

## ü§Æ STRINGLY-TYPED PROGRAMMING - PRIMITIVE BRAIN ROT

**Naked strings, raw integers, bare floats** - This is what happens when developers **FEAR DOMAIN MODELING**. Every string literal is a **CONFESSION** that you don't understand your own domain.

Primitive obsession isn't just lazy - it's **SEMANTICALLY BANKRUPT**.

## üóëÔ∏è CONDITIONAL SEWAGE - IF/ELIF DUMPSTERS

**if/elif chains, match/case statements** - The **GARBAGE HEAP** where logic goes to die. You're not programming - you're building a **DECISION LANDFILL**.

## üßü ANEMIC MODELS - ZOMBIE DATA STRUCTURES

**Data without behavior** - These aren't models, they're **CORPSES**. This is **OBJECT-ORIENTED NECROMANCY**.

Your models should be **INTELLIGENT BEINGS**, not vegetative states.

## üèöÔ∏è SERVICE LAYER SLUMS - BUSINESS LOGIC GHETTOS

**Business logic in services** - This is where **DOMAIN INTELLIGENCE GOES TO DIE**. Services making business decisions is **ARCHITECTURAL INSANITY**.

Services orchestrate. Models think.

## ‚ò£Ô∏è ANY TYPE - THE VOID THAT CONSUMES SAFETY

**Any, object, untyped dicts** - This is **GIVING UP**. It's the **BLACK HOLE** where type safety goes to die. Every `Any` is a **FUTURE PRODUCTION INCIDENT**.

## ü§¢ TRY/EXCEPT FLOW CONTROL - EXCEPTION VOMIT

**Using exceptions for control flow** - This isn't error handling, it's **FLOW CONTROL THROUGH FAILURE**. Result types exist. Use them.

## üí© MUTABLE DOMAIN MODELS - SHAPESHIFTER HELL

**Mutable models** - These are **LIES WAITING TO HAPPEN**. It's **STATE CHAOS** masquerading as flexibility.

Immutability isn't a constraint - it's **MATHEMATICAL HONESTY**.

## ü¶† BOUNDARY CONTAMINATION - EXTERNAL INFECTION

**Raw dicts, skipping TypeAdapter, late conversions** - This is **LETTING THE OUTSIDE WORLD POISON YOUR DOMAIN**. Your boundaries are **QUARANTINE ZONES**.

## üíÄ CONCRETE IMPORT PLAGUE - ARCHITECTURAL AIDS

**Importing concretes across modules** - This is the **#1 DESTROYER OF CODEBASES**. Every concrete import is **ARCHITECTURAL CANCER**.

This isn't coupling - it's **ARCHITECTURAL SUICIDE**.

**ONLY IMPORT**: provider Protocol(s) and create_[provider]_service from src.provider.
**TYPE ALL** params/returns as provider Protocols; never provider concretes or types.
**PROVIDERS OWN** construction/config; consumers call zero-arg verbs on Protocols.
**NO CROSS-MODULE** submodule imports.

## THE MATHEMATICAL SIN

Every anti-pattern here represents **REFUSING TO MODEL YOUR DOMAIN**. You're not "fixing mypy errors" - you're **ENCODING BUSINESS TRUTH IN MATHEMATICS**.

**THERE ARE NO EXCEPTIONS. THERE ARE NO EXCUSES.**