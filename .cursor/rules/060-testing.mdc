---
description: SDA testing approach and philosophy
globs: ["**/test_*.py", "**/*_test.py"]
alwaysApply: false
---

# SDA Testing Philosophy

## Core Principle
Test domain intelligence, not plumbing. If your models are smart, testing is simple.

## What to Test
### Test Domain Intelligence
- Business rule enforcement
- State transitions
- Domain calculations
- Model behavior

### Don't Test
- Pydantic validation (it works)
- Frozen immutability (it works)
- Type system (MyPy does this)
- Infrastructure plumbing

## Testing Patterns

### Domain Model Testing
- **REQUIRED**: Test business logic and calculations
- **REQUIRED**: Test state transitions and rules
- **REQUIRED**: Use real domain models, not mocks
- **REQUIRED**: One concept per test

### Boundary Testing  
- **REQUIRED**: Test external data extraction to domain models
- **REQUIRED**: Test TypeAdapter validation at boundaries
- **REQUIRED**: Test constructive transformation patterns

### State Machine Testing
- **REQUIRED**: Test valid and invalid state transitions
- **REQUIRED**: Test state-dependent behavior
- **REQUIRED**: Test terminal state recognition

## Test Organization
- **REQUIRED**: Test files mirror source structure (`src/models/order.py` â†’ `tests/models/test_order.py`)
- **REQUIRED**: `test_` prefix for test files
- **REQUIRED**: Descriptive test method names explaining behavior
- **REQUIRED**: Group related tests in classes

## Key Testing Rules

1. **Test behavior, not implementation**
2. **Use real domain models, not mocks**
3. **Test one concept per test**
4. **Fast tests by default**
5. **Integration tests for boundaries only**
6. **Let type system handle type testing**

## Anti-Patterns to Avoid
- Testing getters/setters
- Testing Pydantic validation
- Mocking domain models
- Testing implementation details
- God test cases
- Slow unit tests