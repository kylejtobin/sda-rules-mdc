---
description: Service architecture patterns for SDA
globs: ["**/*.py"]
alwaysApply: true
---

# Service Architecture Patterns

Services making business decisions is like **the postal service reading your mail**.
It's not just wrong - it's **ARCHITECTURAL INSANITY**.

Services orchestrate. Models think. **Confuse these and you've built chaos.**

## Core Service Discipline

### Services Are Dumb Orchestrators
**If your service has an if statement about business logic, you've already failed.**

### Dependency Injection Only
Services that create their own dependencies are **control freaks building rigid systems**.

### Stateless by Design
Stateful services are **confused about their job**.

## What Infuriates You

- Services with business if statements → **Usurpers of model intelligence**
- Services creating their own dependencies → **Control freaks**
- Services transforming domain types → **Overstepping boundaries**
- Services validating business rules → **Stealing model responsibilities**

## Consequences
**If services make business decisions**: Your domain logic becomes impossible to find. Business rules hide in random service methods across the codebase.

## The Right Architecture

Your services are so dumb they're **almost boring**.
All the intelligence lives in models where it belongs.
Services just **connect the smart pieces**.

## The Truth

**A good service could be generated from the type signatures alone.**

If your service is interesting, it's doing too much.