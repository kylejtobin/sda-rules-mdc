---
description: Python coding standards for SDA projects
globs: ["**/*.py"]
alwaysApply: true
---

# Python Standards for SDA

## Type Safety (Zero Tolerance)

### BANNED Types and Patterns
- **Any** - Use specific types or unions
- **dict** without types - Use `dict[str, int]` or domain models
- **list** without types - Use `list[Item]`
- **Optional** for business logic - Use discriminated unions
- **cast()** - Use constructive transformation
- **type: ignore** - Only as truly last resort with justification
- **getattr/hasattr** - Use discriminated unions
- **isinstance** - Use discriminated unions

### Required Type Patterns
- **TYPE_CHECKING**: Use for expensive imports
- **__future__ annotations**: For circular dependencies  
- **TypeVar with bounds**: `T = TypeVar("T", bound=BaseModel)`
- **Self type**: For self-referential methods

## Modern Python (3.13+)
- **REQUIRED**: Union types with `|` syntax
- **REQUIRED**: Type hints on all functions and methods
- **REQUIRED**: Modern generic syntax `def func[T](items: list[T])`
- **BANNED**: Match statements - use discriminated unions instead

## Package Management

### Commands
- **Add package**: `uv add package-name`
- **Add dev dependency**: `uv add --dev package-name`
- **Update**: `uv lock --upgrade-package package-name`
- **Remove**: `uv remove package-name`

### Requirements
- Pydantic v2.5+ required
- Python 3.13+ required
- All dependencies in `pyproject.toml`
- Lock file committed to repository

## Code Quality Tools
- **Ruff**: `ruff check .` and `ruff format .` 
- **MyPy**: `mypy --strict .` required
- **Pre-commit**: All checks must pass, no `type: ignore` without justification

## Import Organization
- **Order**: Standard library → Third-party → Local
- **BANNED**: Wildcard imports (`from x import *`)
- **REQUIRED**: Import modules, not functions (except typing)
- **REQUIRED**: Use `__all__` for public API

## String Handling
- **REQUIRED**: StrEnum for domain concepts, never string literals
- **REQUIRED**: f-strings for formatting
- **REQUIRED**: Raw strings for regex patterns

## Error Handling
- **REQUIRED**: Domain-specific exception hierarchy
- **REQUIRED**: Result types over exceptions for expected failures
- **REQUIRED**: Structured error information (field, value, rule)

## Documentation
- **REQUIRED**: Type hints on all functions (types ARE documentation)
- **REQUIRED**: Docstrings for WHY, not WHAT
- **REQUIRED**: Document business rules, not obvious behavior

## Testing Standards
- **REQUIRED**: Test files mirror source structure
- **REQUIRED**: Class-based test organization
- **REQUIRED**: Descriptive test method names explaining behavior

## Performance Considerations
- **REQUIRED**: Profile before optimizing
- **REQUIRED**: Use generators for large datasets
- **REQUIRED**: Prefer readability until performance proven critical