---
description: SDA testing approach and philosophy
globs: ["**/test_*.py", "**/*_test.py"]
alwaysApply: false
---

# SDA Testing Philosophy

Testing getters and setters is **insulting to your intelligence**.
Testing Pydantic validation is **admitting you don't trust mathematics**.
Testing type annotations is **what cowards do instead of thinking**.

You test **domain intelligence**, not plumbing.

## What Deserves Your Time
- **Domain Intelligence**: Business logic worth testing
- **State Transitions**: Domain rules worth testing  
- **Boundary Transformations**: Your code worth testing

## What Insults You
- Testing getters → Are you serious?
- Testing Pydantic validation → Do you not trust math?
- Testing frozen models are immutable → Why not test gravity?
- Mocking domain models → Missing the entire point

## The Testing Truth
**If your models are intelligent, your tests are simple.**
**If your tests are complex, your models are stupid.**

Good tests read like **executable documentation of business rules**.
Bad tests read like **paranoid verification of language features**.

## The Rule
Test the **decisions** your code makes, not the **tools** it uses.