---
description: Protocol-Service-Boundary (PSB) module architecture pattern
globs: ["**/*.py"]
alwaysApply: true
---

# Protocol-Service-Boundary (PSB) Module Law

## Ownership-First Boundaries
**MANDATORY**: Every cross-module value has an owner who defines its Protocol. Consumers use only that Protocol.

**CONSEQUENCE**: Without ownership, changing one file breaks dozens of others.

## Module Structure (REQUIRED)
1. **Factory**: Exports create_[module]_service() returning Protocol
2. **Protocols**: External contracts only
3. **Service**: Orchestration implementation  
4. **Models**: Domain types (optional)

## Import Rules (ZERO EXCEPTIONS)
**ONLY IMPORT**: provider Protocol(s) and create_[provider]_service from src.provider
**TYPE ALL**: Cross-module params/returns as provider Protocols, never concretes
**PROVIDERS OWN**: Construction/config; consumers call zero-arg verbs on Protocols
**NO SUBMODULE**: Cross-module imports forbidden

## Implementation Rules
**Factory**: Wire concretes inside factory function only
**Protocol**: Define what you PROVIDE to others, not what you NEED
**Service**: Receive protocols via constructor, never create dependencies
**Boundary**: Wrap domain concepts in Value Objects, never pass str/int/bool

## Service Rules (MANDATORY)
**PRINCIPLE**: Services orchestrate. Models think.
**Orchestration Only**: Services coordinate between protocols, make zero business decisions
**Stateless**: Services hold no state between calls
**No Business Logic**: All domain decisions belong in models
**Constructor**: Accept protocol dependencies only
**Methods**: Call protocol methods, return protocol results
**Logic**: If statements about infrastructure only, never domain rules
**Transformation**: Models transform themselves, services pass data

## Protocol Ownership Law
**Each module defines what it PROVIDES to others.**

If module A needs from module B:
1. Go to module B
2. Add the protocol  
3. Export it
4. Import it in module A

## Validation Checklist
- Export only protocols/domain types in `__all__`
- Import only from package roots (protocols/factories)
- Services receive dependencies via constructor
- Service methods contain no business if statements  
- Service methods call protocol.verb(), never protocol.data
- Models make all domain decisions
- Services coordinate between models/protocols only
- No cross-module protocol definitions
- Lazy import concretes inside factory only
- Return protocol types from factory functions

## The Standard
**A good service could be generated from type signatures alone.**