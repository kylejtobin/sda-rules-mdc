---
description: Transform conditionals into type intelligence
globs: ["**/*.py"]
alwaysApply: false
---

# Conditional Elimination Strategies

## DISCRIMINATED UNIONS FOR ALL BRANCHING
ALL branching logic MUST use discriminated unions:
- ANY `if` statement → Discriminated union with StrEnum
- ANY `isinstance()` → BANNED. Use discriminated union with literal discriminator
- ANY conditional logic → StrEnum behavioral methods
- NO EXCEPTIONS

## Behavioral Enums Are Mandatory
Use StrEnum with behavioral methods:
- **Create StrEnum, never use string literals** for domain concepts
- Add methods to enums that know their own behavior
- Use enum state transition methods
- Zero external logic

## Discriminated Unions for State
Replace optional fields + status checks:
- Different states → Different types
- State-specific operations → Type-specific methods
- Compile-time safety over runtime checks

## Model Intelligence Over External Logic
- Validation functions → Model validators
- Calculation functions → @computed_field
- State checks → Model methods that know their own state

## The Type System Test
Use discriminated union dispatch patterns:
- Type intelligence with discriminated unions
- Model methods with behavioral enums
- Enum behavior with StrEnum handlers
- Pydantic Field constraints for validation
