---
description: Patterns for handling external system boundaries
globs: ["**/*.py"]
alwaysApply: false
---

# Boundary Intelligence Patterns

## Core Principle
Don't fight external systemsâ€”extract domain intelligence from them.

## Boundary Recognition
- **External systems**: Parse trees, API responses, database rows, configuration files
- **Domain models**: Your semantic understanding of external data
- **Extraction layer**: Pure functions that cross boundaries once
- **TypeAdapter**: Pydantic's tool for boundary validation

## Banned Boundary Patterns
- **Leaky abstractions** - Domain models wrapping external objects
- **Mixed logic** - Boundary crossing + domain logic in same function
- **Stateful extraction** - Services accumulating state during boundary crossing
- **Nested external dispatch** - Multiple levels of external type checking

## Required Boundary Patterns
- **Single extraction point** - One place per external system type
- **Immediate domain conversion** - External data becomes domain models quickly
- **Pure extraction functions** - Boundary crossing with no side effects
- **Explicit boundary classes** - Clear separation of boundary vs domain logic

## Boundary Design Rules
- External type checking only in extraction functions
- Domain models never import external system modules
- TypeAdapter for validation at system boundaries
- Functional visitors that produce domain models, not side effects
- Metadata extraction instead of direct external object wrapping