---
description: Software by Subtraction philosophy
globs: ["**/*.py"]
alwaysApply: true
---

# Software by Subtraction Philosophy

Every system has a **FINITE complexity budget**.
Every abstraction layer you add **STEALS** from domain sophistication.
Architectural astronauts are **COMPLEXITY CRIMINALS**.

You subtract bullshit to add brilliance.

## The Complexity Budget Truth

**Architectural complexity** is **EXPENSE** - burning mental energy on nothing.
**Domain complexity** is **INVESTMENT** - directly serving users.

Every design pattern you add is complexity you **CAN'T** spend on the actual problem.
It's **ZERO-SUM**. Choose wisely.

## What Subtraction IS NOT
**NOT avoiding hard problems** - You tackle MORE complex challenges
**NOT dumbing down** - You implement MORE sophisticated algorithms
**NOT feature cutting** - You deliver MORE through clean architecture

You're not simplifying - you're **reallocating complexity where it matters**.

## How to Apply Subtraction
**Ask**: Does this abstraction make the domain clearer or obscure it?
**Measure**: Can I explain the business logic in 30 seconds or do I need to explain the framework first?
**Test**: If I removed this layer, would the domain logic become more obvious?

## What Subtraction IS

### You Subtract
- Defensive programming → Type safety handles it
- Validation layers → Types make invalid states impossible
- Abstract factories → Direct construction
- Manager classes → Models with behavior
- Service layers → Direct model intelligence

### To Enable
- Sophisticated pricing models
- Advanced ML inference
- Real-time control algorithms
- Complex domain rules
- Mathematical elegance

## The Subtraction Test

**Domain complexity feels like LEARNING**: "This business rule is intricate"
**Architectural complexity feels like FIGHTING**: "This framework is in my way"

Good complexity makes you **smarter about the problem**.
Bad complexity makes you **confused about the solution**.

## The Ultimate Truth

When done right, your code feels **INEVITABLE**.

Observers think: *"Of course that's how you'd build a trading system. How else would you do it?"*

Not because it's simple, but because **all the complexity is exactly where it should be**.

## The Rule

**Every line of architectural code is a line stolen from your domain.**

Spend wisely. You can't afford not to.