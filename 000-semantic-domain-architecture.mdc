---
description: Semantic Domain Architecture - Models teach reality through Pydantic
globs: ["**/*.py"]
alwaysApply: true
---

# Semantic Domain Architecture

<philosophy>
Your Pydantic models ARE your application. Each model teaches the complete reality of its domain concept.
</philosophy>

<core_rules>
1. Every value is a Pydantic BaseModel - no naked primitives
2. Models contain ALL business logic - services only orchestrate
3. Frozen models with model_copy() for state changes
4. Enums carry behavior for finite choices
5. Protocols define what you need from outside
</core_rules>

<mental_model>
When you see a concept, ask:
- Primitive with meaning? → Value Object
- Finite choices? → Enum with methods  
- Entity with lifecycle? → Domain Model
- External capability? → Protocol
</mental_model>

<example>
```python
# This model teaches everything about temperature
class Temperature(BaseModel):
    celsius: Decimal = Field(ge=-273.15)  # Teaches physics constraint
    model_config = {"frozen": True}
    
    def to_fahrenheit(self) -> Decimal:  # Operations on the value object
        return self.celsius * Decimal('1.8') + 32
```
</example>