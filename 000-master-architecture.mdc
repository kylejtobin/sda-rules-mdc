---
description: Models that teach reality. When every constraint encodes physics and every field has meaning, AI understands your domain as well as you do.
globs: ["**/*.py"]
alwaysApply: true
version: 4.0.0
---

# Models Are Reality Teachers

When you write `price: Decimal = Field(gt=0)`, you're not validating data. You're teaching that prices can't be negative in this universe. AI learns your reality from your models.

---

## Core Pattern: Intelligent Value Objects

```python
class Temperature(BaseModel):
    """Temperature that knows thermodynamic limits."""
    celsius: Decimal = Field(ge=-273.15, le=5778)  # Absolute zero to Sun's surface
    
    model_config = {"frozen": True}
    
    @computed_field
    @property
    def fahrenheit(self) -> Decimal:
        return self.celsius * Decimal('1.8') + 32
    
    @computed_field
    @property
    def state_of_water(self) -> Literal["solid", "liquid", "gas"]:
        if self.celsius <= 0:
            return "solid"
        elif self.celsius >= 100:
            return "gas"
        return "liquid"
    
    def __add__(self, other: "Temperature") -> "Temperature":
        # Temperatures don't add - this teaches physics
        raise TypeError("Cannot add temperatures (that's not how thermodynamics works)")
```

This model teaches:
- Physical constraints (absolute zero exists)
- Unit conversions (F = C × 1.8 + 32)  
- State transitions (water freezes at 0°C)
- Invalid operations (temperatures don't sum)

Every domain concept gets this treatment. No primitives.

---

## Master Example: Order Lifecycle

```python
from typing import assert_never

class Order(BaseModel):
    """Order that models complete e-commerce reality."""
    id: OrderId = Field(default_factory=OrderId.generate)
    customer: Customer
    items: list[LineItem]
    status: OrderStatus = OrderStatus.DRAFT
    
    # Events as first-class data
    placed_at: Optional[datetime] = None
    paid_at: Optional[datetime] = None  
    shipped_at: Optional[datetime] = None
    delivered_at: Optional[datetime] = None
    cancelled_at: Optional[datetime] = None
    
    model_config = {"frozen": True, "extra": "forbid"}
    
    @field_validator('items')
    @classmethod
    def require_items(cls, v: list[LineItem]) -> list[LineItem]:
        if not v:
            raise ValueError("Orders must have items")
        return v
    
    @computed_field
    @property
    def total(self) -> Money:
        """Sum of items plus tax minus discounts."""
        subtotal = sum((item.total for item in self.items), Money.zero())
        return subtotal.add_tax_rate(self.customer.tax_rate)
    
    @computed_field
    @property
    def can_cancel(self) -> bool:
        """Cancellation rules encoded in the model."""
        match self.status:
            case OrderStatus.DRAFT | OrderStatus.PLACED:
                return True
            case OrderStatus.PAID:
                # Can cancel within 1 hour of payment
                return (datetime.now() - self.paid_at).seconds < 3600
            case OrderStatus.SHIPPED | OrderStatus.DELIVERED | OrderStatus.CANCELLED:
                return False
            case _:
                assert_never(self.status)
    
    def place(self) -> "Order":
        """State transition with business rules."""
        if self.status != OrderStatus.DRAFT:
            raise InvalidStateTransition(f"Cannot place order in {self.status} status")
        
        return self.model_copy(update={
            'status': OrderStatus.PLACED,
            'placed_at': datetime.now()
        })
    
    def pay(self, payment: Payment) -> "Order":
        """Payment transitions with validation."""
        if self.status != OrderStatus.PLACED:
            raise InvalidStateTransition("Can only pay placed orders")
        
        if payment.amount != self.total:
            raise PaymentMismatch(f"Payment {payment.amount} doesn't match total {self.total}")
            
        return self.model_copy(update={
            'status': OrderStatus.PAID,
            'paid_at': datetime.now()
        })
```

This single model teaches:
- State machines (status transitions)
- Business rules (cancellation within 1 hour)
- Immutable updates (model_copy)
- Temporal modeling (event timestamps)
- Domain operations (place, pay, ship)
- Computed intelligence (can_cancel)

AI reading this model understands your entire order system.

---

## Protocols: Capability Contracts

```python
# What the domain needs (not how it's done)
class TimeProvider(Protocol):
    def now(self) -> datetime: ...

class PricingEngine(Protocol):
    async def calculate_discount(self, customer: Customer, items: list[LineItem]) -> Money: ...

# Models use protocols, stay testable
class DiscountedOrder(Order):
    @computed_field
    @property
    def final_price(self, pricing: PricingEngine) -> Money:
        discount = await pricing.calculate_discount(self.customer, self.items)
        return self.total.subtract(discount)
```

---

## The Semantic Pyramid

```
┌─────────────────┐
│   Protocols     │  What we need
├─────────────────┤
│  Domain Models  │  Reality encoded  
├─────────────────┤
│  Value Objects  │  Semantic atoms
└─────────────────┘
```

Build from the bottom. Each layer teaches the next.

---

## Why This Works

1. **AI comprehends constraints**: When price can't be negative, AI won't generate negative prices
2. **Types carry meaning**: `OrderId` vs `str` tells AI these aren't interchangeable
3. **Operations encode rules**: `order.cancel()` exists means cancellation is possible
4. **States prevent nonsense**: Can't ship a draft order if the type system won't allow it

Your models become the spec. The documentation. The teacher.

---

## One Rule

Make your models so intelligent that everything else—services, tests, infrastructure—becomes obvious mechanical work.

When AI reads `Temperature`, it learns thermodynamics.  
When AI reads `Order`, it learns your business.  
When AI reads your domain, it operates within your reality.

That's semantic architecture.